# -*- coding: utf-8 -*-
"""ka-cpi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZrDaWtMv0VMjLjis1FDIgTNXErfRf_cl
"""

import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files
import io
import re

def plot_cpi_trends(file_path):
    """
    Loads the CPI dataset, filters for Karnataka and the month of January,
    and generates a line plot comparing Rural, Urban, and Rural+Urban CPI over years.

    Args:
        file_path (io.BytesIO or str): Either the file content buffer from Colab upload,
                                        or a file path string for local execution.
    """
    # --- Configuration ---
    TARGET_STATE = 'Karnataka'
    TARGET_MONTH = 'January'

    # Columns to plot (assumed to be the names of the "Sector" values)
    SECTORS = ['Rural', 'Urban', 'Rural+Urban']

    # Plotting styles
    LINE_WIDTH = 3
    MARKER_SIZE = 8
    FONT_SIZE = 14

    try:
        # 1. Load Data
        df = pd.read_csv(file_path)

        # 2. Data Cleaning and Preparation

        # Standardize column names by stripping leading/trailing whitespace
        df.columns = df.columns.str.strip()

        # Check if the target state column exists (it should match the target state name)
        if TARGET_STATE not in df.columns:
            print(f"Error: Could not find column for state: '{TARGET_STATE}'. Please check the column header name.")
            print(f"Available columns: {df.columns.tolist()}")
            return

        # Filter for the target state and target month (January)
        filtered_df = df[
            (df['Name'].str.strip() == TARGET_MONTH) &
            (df['Sector'].isin(SECTORS))
        ].copy()

        if filtered_df.empty:
            print(f"Error: No data found for {TARGET_STATE} in {TARGET_MONTH}. Check filtering criteria.")
            return

        # Pivot the data to have years as index and sectors as columns
        # CPI values are stored in the column named after the state
        pivot_df = filtered_df.pivot(
            index='Year',
            columns='Sector',
            values=TARGET_STATE
        )

        # Ensure the required sectors are present
        if not all(sector in pivot_df.columns for sector in SECTORS):
            print("Warning: One or more required sectors (Rural, Urban, Rural+Urban) are missing after filtering.")
            # Drop missing columns if necessary, but proceed with available ones
            SECTORS = [s for s in SECTORS if s in pivot_df.columns]
            if not SECTORS:
                 print("Error: No valid sector data available to plot.")
                 return

        # Convert the CPI values to numeric, coercing errors to NaN
        # This handles the 'NA' values present in some cells
        pivot_df[SECTORS] = pivot_df[SECTORS].apply(pd.to_numeric, errors='coerce')

        # Drop rows where all selected sectors are NaN for clean plotting
        pivot_df.dropna(subset=SECTORS, how='all', inplace=True)

        if pivot_df.empty:
            print(f"Error: Data for {TARGET_STATE} in {TARGET_MONTH} is all missing (NA) or zero.")
            return

        # 3. Plotting

        plt.figure(figsize=(12, 7))

        # Define colors for the three sectors (Urban, Rural, Rural+Urban)
        colors = {
            'Rural': '#2ca02c',       # Green
            'Urban': '#d62728',       # Red
            'Rural+Urban': '#1f77b4'  # Blue
        }

        # Iterate and plot each sector
        for sector in SECTORS:
            plt.plot(
                pivot_df.index,
                pivot_df[sector],
                label=sector,
                color=colors.get(sector, '#7f7f7f'), # Fallback color
                linewidth=LINE_WIDTH,
                marker='o',
                markersize=MARKER_SIZE
            )

        # Apply styling and labels
        plt.title(f'Consumer Price Index Trend for {TARGET_STATE} (January Data)', fontsize=FONT_SIZE + 4, weight='bold')
        plt.xlabel('Year', fontsize=FONT_SIZE + 2)
        plt.ylabel('Consumer Price Index (Base 100)', fontsize=FONT_SIZE + 2)

        # Set x-ticks to be only the available years for clarity
        plt.xticks(pivot_df.index.tolist(), fontsize=FONT_SIZE)
        plt.yticks(fontsize=FONT_SIZE)

        plt.legend(title='Sector', fontsize=FONT_SIZE, title_fontsize=FONT_SIZE)
        plt.grid(axis='y', linestyle='--', alpha=0.7)
        plt.tight_layout()
        plt.show()

    except FileNotFoundError:
        print(f"Error: File not found. Please ensure the path is correct.")
    except Exception as e:
        print(f"An unexpected error occurred during processing: {e}")


if __name__ == '__main__':
    # *** COLAB-SPECIFIC FILE UPLOAD LOGIC ***
    print("Please upload the 'state-consumer-index.csv' file now.")
    try:
        # This opens the file selection dialog in Google Colab
        uploaded = files.upload()

        if uploaded:
            # The key is the filename, the value is the byte content
            file_name = list(uploaded.keys())[0]
            # Create an in-memory buffer of the file content
            file_content = io.BytesIO(uploaded[file_name])

            # Pass the in-memory buffer to the function
            plot_cpi_trends(file_content)
        else:
            print("File upload cancelled. Cannot generate plots.")

    except ImportError:
        # Fallback for running outside of Colab (e.g., local IDE)
        print("Not running in Google Colab. Using hardcoded path 'state-consumer-index.csv'.")
        plot_cpi_trends("state-consumer-index.csv")
    except Exception as e:
        print(f"An error occurred during file upload/processing: {e}")