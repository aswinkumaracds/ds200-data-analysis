# -*- coding: utf-8 -*-
"""state-population.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sfNUQQflfcr4TbTcwK9SAoneBbeWoFi6
"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

def generate_bar_plots(file_path):
    """
    Loads population data, filters for specified states, and generates two
    bar plots with custom styling for population and population density.

    Args:
        file_path (str): Path to the CSV file containing the data.
    """
    # --- Configuration ---
    # Define the target states and the columns to plot
    target_states = ['Tamil Nadu', 'Maharashtra', 'Uttar Pradesh', 'West Bengal']
    STATE_COL = 'India/State/Union Territory'
    POP_COL = 'Population 2011'
    DENSITY_COL = 'Population Density (per sq.km) - 2011'

    # Style constants
    AXIS_LINEWIDTH = 2
    LABEL_FONTSIZE = 24
    TITLE_FONTSIZE = 28
    TICK_FONTSIZE = 20
    DATA_LABEL_FONTSIZE = 16

    try:
        # 1. Load and Filter Data
        df = pd.read_csv(file_path)

        # Filter the DataFrame for the required states
        filtered_df = df[df[STATE_COL].isin(target_states)].copy()

        if filtered_df.empty:
            print(f"Error: No data found for the target states: {target_states}")
            return

        # Ensure consistent order for plotting
        filtered_df[STATE_COL] = pd.Categorical(filtered_df[STATE_COL], categories=target_states, ordered=True)
        filtered_df = filtered_df.sort_values(STATE_COL)

        states = filtered_df[STATE_COL].tolist()
        population = filtered_df[POP_COL].tolist()
        density = filtered_df[DENSITY_COL].tolist()

    except FileNotFoundError:
        print(f"Error: File not found at {file_path}")
        return
    except KeyError as e:
        print(f"Error: Required column not found in the file: {e}. Check column names.")
        return
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return

    # Helper function to apply required custom styling to the axes
    def apply_custom_style(ax, title, ylabel):
        """Sets axis linewidth, label font sizes, and rotates x-ticks."""

        # Set linewidth for all four axes spines (borders)
        for spine in ax.spines.values():
            spine.set_linewidth(AXIS_LINEWIDTH)

        # Set font size 24 for x and y labels (REQUIRED)
        ax.set_xlabel('State', fontsize=LABEL_FONTSIZE)
        ax.set_ylabel(ylabel, fontsize=LABEL_FONTSIZE)

        # Set title and adjust tick label sizes for readability
        ax.set_title(title, fontsize=TITLE_FONTSIZE, pad=20)
        ax.tick_params(axis='x', labelsize=TICK_FONTSIZE, rotation=45)
        ax.tick_params(axis='y', labelsize=TICK_FONTSIZE)
        ax.grid(axis='y', linestyle='--', alpha=0.6)


    # --- Figure 1: Population 2011 ---

    fig1, ax1 = plt.subplots(figsize=(12, 8))

    # Define colors for the bars
    colors1 = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'] # Blue, Orange, Green, Red

    # Create the bar plot for Population
    bars1 = ax1.bar(states, population, color=colors1)

    # Apply styling
    apply_custom_style(ax1, 'Population 2011 Comparison', 'Population (in Millions)')

    # Custom formatter to display y-axis ticks in Millions (M)
    def millions_formatter(x, pos):
        """Formats the y-axis values to display in millions."""
        return f'{x / 1e6:,.0f}M'

    formatter = FuncFormatter(millions_formatter)
    ax1.yaxis.set_major_formatter(formatter)

    # Add data labels on top of the bars (in Millions)
    for bar in bars1:
        yval = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2, yval + (max(population) * 0.01),
                 f'{yval/1e6:.1f}M', ha='center', va='bottom', fontsize=DATA_LABEL_FONTSIZE)

    plt.tight_layout()

    # --- Figure 2: Population Density (per sq.km) - 2011 ---

    fig2, ax2 = plt.subplots(figsize=(12, 8))

    # Define colors for the bars
    colors2 = ['#17becf', '#e377c2', '#bcbd22', '#7f7f7f'] # Teal, Pink, Olive, Gray

    # Create the bar plot for Population Density
    bars2 = ax2.bar(states, density, color=colors2)

    # Apply styling
    apply_custom_style(ax2, 'Population Density (per sq.km) - 2011 Comparison', 'Density (per sq.km)')

    # Add data labels on top of the bars
    for bar in bars2:
        yval = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2, yval + (max(density) * 0.01),
                 f'{yval:,.0f}', ha='center', va='bottom', fontsize=DATA_LABEL_FONTSIZE)

    plt.tight_layout()

    # Display the plots
    plt.show()

if __name__ == '__main__':
    # The uploaded file name is used as the input to the function
    generate_bar_plots("Table_2A_State_Uts.csv")